version: 2.1

defaults: &defaults
    docker:
      - image: node:16.14

deploy_defaults: &deploy_defaults
    docker:
      - image: cimg/python:3.10.2

install_build_dependency: &install_build_dependency
    name: Installation of build and deployment dependencies.
    command: |
      apt update
      apt install jq -y
      apt install python3-pip -y
      pip3 install awscli --upgrade

install_dependency: &install_dependency
    name: Installation of build and deployment dependencies.
    command: |
      pip3 install awscli --upgrade

install_deploysuite: &install_deploysuite
    name: Installation of install_deploysuite.
    command: |
      git clone --branch v1.4.6 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
      cp ./../buildscript/master_deploy.sh .
      cp ./../buildscript/buildenv.sh .
      cp ./../buildscript/awsconfiguration.sh .

restore_cache_settings_for_build: &restore_cache_settings_for_build
    key: connect-node-modules-{{ checksum "yarn.lock" }}

save_cache_settings: &save_cache_settings
    key: connect-node-modules-{{ checksum "yarn.lock" }}
    paths:
      - node_modules

running_yarn_tslint: &running_yarn_tslint
    name: Running Yarn tslint
    command: |
      yarn add tslint -g
      yarn lint

running_yarn_build: &running_yarn_build
    name: Running Yarn Build
    command: |
      source buildenvvar
      yarn install
      yarn build

workspace_persist: &workspace_persist
    root: .
    paths:
      - build

workspace_attach: &workspace_attach
    at: ./workspace

build_configuration_fetch: &build_configuration_fetch
    name: "configuring environment"
    command: |
      ./awsconfiguration.sh $DEPLOY_ENV
      ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-buildvar
      aws s3 cp s3://tc-platform-${LOGICAL_ENV}/securitymanager/${LOGICAL_ENV}-platform-ui.env ./.env

lint_steps: &lint_steps
    # Initialization.
    - checkout
    - setup_remote_docker
    - run: *running_yarn_tslint

build_steps: &build_steps
    # Initialization.
    - checkout
    - setup_remote_docker
    - run: *install_build_dependency
    - run: *install_deploysuite
    - run: *build_configuration_fetch
    - run: *running_yarn_build
    - persist_to_workspace: *workspace_persist

deploy_steps: &deploy_steps
    - checkout
    - attach_workspace: *workspace_attach
    - run: *install_dependency
    - run: *install_deploysuite
    - deploy:
        name: Running MasterScript
        command: |
          ./awsconfiguration.sh $DEPLOY_ENV
          source awsenvconf
          ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-deployvar
          source buildenvvar
          ./master_deploy.sh -d CFRONT -e $DEPLOY_ENV -c $ENABLE_CACHE

jobs:
  lint-dev:
    <<: *defaults
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "dev"
      APPNAME: "platform-ui-mvp"
    steps: *lint_steps

  lint-prod:
    <<: *defaults
    environment:
      DEPLOY_ENV: "PROD"
      LOGICAL_ENV: "prod"
      APPNAME: "platform-ui-mvp"
    steps: *lint_steps
    
  build-dev:
    <<: *defaults
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "dev"
      APPNAME: "platform-ui-mvp"
    steps: *build_steps

  build-prod:
    <<: *defaults
    environment:
      DEPLOY_ENV: "PROD"
      LOGICAL_ENV: "prod"
      APPNAME: "platform-ui-mvp"
    steps: *build_steps

  # Just tests commited code.
  deployDev:
    <<: *deploy_defaults
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "dev"
      ENABLE_CACHE: false
      APPNAME: "platform-ui-mvp"
    steps: *deploy_steps

  deployProd:
    <<: *deploy_defaults
    environment:
      DEPLOY_ENV: "PROD"
      LOGICAL_ENV: "prod"
      ENABLE_CACHE: true
      APPNAME: "platform-ui-mvp"
    steps: *deploy_steps

  # Test job for the cases when we don not need deployment.
  test:
    docker:
      - image: cimg/node:16.15.0
    steps:
      - checkout
      - restore_cache:
          key: test-node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Config Git
          command: git config --global url."https://git@".insteadOf git://
      - run:
          name: App yarn install
          command: yarn install
          command: yarn cypress install
          command: yarn build
          no_output_timeout: 20m
      - save_cache:
          key: test-node-modules-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run: yarn cy:ci

workflows:
  version: 2
  build:
    jobs:
      - lint-dev:
          context : org-global
          filters:
            branches:
              ignore:
                - master

      - lint-prod:
          context : org-global
          filters:
            branches:
              only:
                - master

      - build-dev:
          context : org-global
          filters:
            branches:
              ignore:
                - master

      - build-prod:
          context : org-global
          filters:
            branches:
              only:
                - master

      - deployDev:
          context : org-global
          requires:
            - build-dev
          filters: 
            branches:
              only:
                - dev

      - deployProd:
          context : org-global
          requires:
            - build-prod
          filters: &filters-prod
            branches:
              only:
                - master

      - test:
          filters:
            branches:
              ignore:
                - develop