{
    // Place your mfe-customer-work workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix,
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    //   "scope": "javascript,typescript",
    //   "prefix": "log",
    //   "body": [
    //     "console.log('$1');",
    //     "$2"
    //   ],
    //   "description": "Log output to console"
    // }
    "[PLAT] React component": {
      "scope": "typescript,typescriptreact",
      "prefix": "rfc",
      "body": [
        "import { FC } from 'react'",
        "",
        "import styles from './${1:ComponentName}.module.scss'",
        "",
        "interface ${1:ComponentName}Props {",
        "}",
        "",
        "const ${1:ComponentName}: FC<${1:ComponentName}Props> = props => {",
        "",
        "    return (",
        "        <div className={styles.wrap}>",
        "        </div>",
        "    )",
        "}",
        "",
        "export default ${1:ComponentName}",
        ""
      ],
      "description": "Create a react functional component"
    },
    "[PLAT] Simple React component": {
      "scope": "typescript,typescriptreact",
      "prefix": "rfc",
      "body": [
        "import { FC } from 'react'",
        "",
        "import styles from './${1:ComponentName}.module.scss'",
        "",
        "interface ${1:ComponentName}Props {",
        "}",
        "",
        "const ${1:ComponentName}: FC<${1:ComponentName}Props> = props => (",
        "    <div className={styles.wrap}>",
        "    </div>",
        ")",
        "",
        "export default ${1:ComponentName}",
        ""
      ],
      "description": "Create a react functional component"
    },
    "[PLAT] export comp": {
      "scope": "typescript,typescriptreact",
      "prefix": "exp",
      "body": [
        "export { default as ${1:ComponentName} } from './${1:ComponentName}'",
        ""
      ],
      "description": "Export module"
    },
    "[PLAT] use state": {
        "scope": "typescript,typescriptreact",
        "prefix": "usest",
        "body": [
            "const [$1, set$2]: [$3, Dispatch<SetStateAction<$3>>] = useState($4)$0",
        ]
    },
    "[PLAT] includes": {
        "scope": "css,scss",
        "prefix": "includes",
        "body": [
            "@import '@libs/ui/styles/includes';",
        ]
    },
    "[PLAT] Storybook Template": {
        "scope": "typescript,typescriptreact",
        "prefix": "sb",
        "body": [
            "/* eslint-disable no-underscore-dangle */",
            "/* eslint-disable camelcase */",
            "",
            "import { Meta, StoryObj } from '@storybook/react'",
            "",
            "import '../../styles/index.scss'",
            "",
            "import { ${1:ComponentName} } from '.'",
            "",
            "const meta: Meta<typeof ${1:ComponentName}> = {",
            "    argTypes: {",
            "    },",
            "    component: ${1:ComponentName},",
            "    excludeStories: /.*Decorator$/,",
            "    tags: ['autodocs'],",
            "    title: 'Components/${1:ComponentName}',",
            "}",
            "",
            "export default meta",
            "",
            "type Story = StoryObj<typeof ${1:ComponentName}>;",
            "",
            "export const Primary: Story = {",
            "    args: {",
            "    },",
            "}",
            ""
        ]
    }
  }
